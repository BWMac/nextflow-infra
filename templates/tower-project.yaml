AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Stack for provisioning the AWS resources needed for
  configuring compute environments in Nextflow Tower.

Parameters:
  ReadWriteAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings) who
      should have read- and write-access to the S3 bucket.
      You can provide role ARNs or assumed-role ARNs.

  ReadOnlyAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings)
      who should only have read-access to the S3 bucket.
      You can provide role ARNs or assumed-role ARNs.

  EnableDataLifeCycle:
    Type: String
    Description: Enabled to enable bucket lifecycle rule, default is Disabled
    AllowedValues:
      - Enabled
      - Disabled
    Default: Disabled

  LifecycleDataTransition:
    Type: Number
    Description: >-
      Number of days until S3 objects are moved to LifecycleDataStorageClass
    Default: 30

  LifecycleDataStorageClass:
    Type: String
    Description: S3 bucket objects will transition into this storage class
    AllowedValues:
      - DEEP_ARCHIVE
      - INTELLIGENT_TIERING
      - STANDARD_IA
      - ONEZONE_IA
      - GLACIER
    Default: GLACIER

  LifecycleDataExpiration:
    Type: Number
    Description: >-
      Number of days (from creation) when objects are
      deleted from S3 and the LifecycleDataStorageClass
    Default: 365000

  AdminArns:
    Type: List<String>
    Description: >-
      List of IAM user and role ARNs (strings) who should have access to 
      project-specific resources (e.g., private S3 bucket, KMS key, secrets). 
  
  NonAdminArns:
    Type: List<String>
    Description: >-
      List of IAM user and role ARNs (strings) who shouldn't have access to 
      project-specific resources (e.g., private S3 bucket, KMS key, secrets). 

  TemplateRootUrl:
    Type: String
    Description: URL of S3 bucket where templates are deployed
    ConstraintDescription: Must be a valid S3 HTTP URL

  TowerForgePolicyArn:
    Type: String
    Description: ARN for Tower Forge IAM policy

  TowerLaunchPolicyArn:
    Type: String
    Description: ARN for Tower Launch IAM policy

Conditions:
  HasReadWriteAccessArns:
    !Not [!Equals [!Join [",", !Ref ReadWriteAccessArns], ""]]
  HasReadOnlyAccessArns:
    !Not [!Equals [!Join [",", !Ref ReadOnlyAccessArns], ""]]
  HasAnyAccessArns:
    !Or [!Condition HasReadWriteAccessArns, !Condition HasReadOnlyAccessArns]

Resources:
  EncryptionKeyStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateRootUrl}/aws-infra/v0.3.1/KMS/kms-key.yaml
      TimeoutInMinutes: 5
      Parameters:
        AliasName: !Sub "alias/${AWS::StackName}-EncryptionKey"
        AdminPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !Join
              - ","
              - !Ref AdminArns
        UserPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !Join
              - ","
              - !Ref AdminArns
            - !If
              - HasReadWriteAccessArns
              - !Join
                - ","
                - !Ref ReadWriteAccessArns
              - !Ref AWS::NoValue
            - !If
              - HasReadOnlyAccessArns
              - !Join
                - ","
                - !Ref ReadOnlyAccessArns
              - !Ref AWS::NoValue

  TowerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt EncryptionKeyStack.Outputs.Key
      LifecycleConfiguration:
        Rules:
        - Id: DataLifecycleRule
          Status: !Ref EnableDataLifeCycle
          ExpirationInDays: !Ref LifecycleDataExpiration
          Transitions:
            - TransitionInDays: !Ref LifecycleDataTransition
              StorageClass: !Ref LifecycleDataStorageClass

  TowerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TowerBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyAccessToNonAdmins
            Effect: Deny
            Principal:
              AWS: !Ref NonAdminArns
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${TowerBucket}"
              - !Sub "arn:aws:s3:::${TowerBucket}/*"
          - !If
            - HasReadWriteAccessArns
            - Sid: GrantWriteAccessToReadWriteAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref ReadWriteAccessArns
              Action: "s3:*"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
                - !Sub "arn:aws:s3:::${TowerBucket}/*"
            - !Ref AWS::NoValue
          - !If
            - HasReadOnlyAccessArns
            - Sid: GrantReadAccessToReadOnlyAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref ReadOnlyAccessArns
              Action:
                - "s3:Get*"
                - "s3:List*"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
                - !Sub "arn:aws:s3:::${TowerBucket}/*"
            - !Ref AWS::NoValue

  TowerForgeServiceUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - !Ref TowerForgePolicyArn
        - !Ref TowerLaunchPolicyArn
      Policies:
        - PolicyName: TowerForgeServiceUserS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:PutObjectTagging"
                - "s3:DeleteObject"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
                - !Sub "arn:aws:s3:::${TowerBucket}/*"

  TowerForgeServiceUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref TowerForgeServiceUser

  TowerProjectConfigurationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-TowerProjectConfiguration"
      Description: !Sub "Configuration for ${AWS::StackName} Project in Tower"
      SecretString: !Sub >-
        {
          "forge_access_key_id":      "${TowerForgeServiceUserAccessKey}",
          "forge_secret_access_key":  "${TowerForgeServiceUserAccessKey.SecretAccessKey}",
          "bucket_name":              "${TowerBucket}"
        }
      KmsKeyId: !GetAtt EncryptionKeyStack.Outputs.Key
  
  TowerProjectConfigurationSecretPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Condition: HasAnyAccessArns
    Properties:
      BlockPublicPolicy: True
      SecretId: !Ref TowerProjectConfigurationSecret
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
        - Sid: GrantReadAccessToReadWriteAccessArns
          Effect: Allow
          Action: "secretsmanager:GetSecretValue"
          Principal:
            AWS: !Split
              - ","
              - !Join
                - ","
                - - !If
                    - HasReadWriteAccessArns
                    - !Join
                      - ","
                      - !Ref ReadWriteAccessArns
                    - !Ref AWS::NoValue
                  - !If
                    - HasReadOnlyAccessArns
                    - !Join
                      - ","
                      - !Ref ReadOnlyAccessArns
                    - !Ref AWS::NoValue
          Resource: "*"

Outputs:
  ReadWriteAccessArns:
    Value: !Join [ ",", !Ref ReadWriteAccessArns ]
    Condition: HasReadWriteAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadWriteAccessArns"

  ReadOnlyAccessArns:
    Value: !Join [ ",", !Ref ReadOnlyAccessArns ]
    Condition: HasReadOnlyAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadOnlyAccessArns"

  TowerBucket:
    Value: !Ref TowerBucket
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerBucket"

  TowerBucketArn:
    Value: !GetAtt TowerBucket.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerBucketArn"

  TowerForgeServiceUser:
    Value: !Ref TowerForgeServiceUser
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUser"

  TowerForgeServiceUserArn:
    Value: !GetAtt TowerForgeServiceUser.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserArn"

  TowerProjectConfigurationSecret:
    Value: !Sub "${AWS::StackName}-Credentials"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerProjectConfigurationSecretName"

  TowerProjectConfigurationSecretArn:
    Value: !Ref TowerProjectConfigurationSecret
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerProjectConfigurationSecretArn"
