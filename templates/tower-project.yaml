AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Stack for provisioning the AWS resources needed for
  configuring compute environments in Nextflow Tower.

Parameters:
  ReadWriteAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings) who
      should have read- and write-access to the S3 bucket.
      You can provide role ARNs or assumed-role ARNs.

  ReadOnlyAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings)
      who should only have read-access to the S3 bucket.
      You can provide role ARNs or assumed-role ARNs.
  
  EnableDataLifeCycle:
    Type: String
    Description: Enabled to enable bucket lifecycle rule, default is Disabled
    AllowedValues:
      - Enabled
      - Disabled
    Default: Disabled

  LifecycleDataTransition:
    Type: Number
    Description: >-
      Number of days until S3 objects are moved to LifecycleDataStorageClass
    Default: 30

  LifecycleDataStorageClass:
    Type: String
    Description: S3 bucket objects will transition into this storage class
    AllowedValues:
      - DEEP_ARCHIVE
      - INTELLIGENT_TIERING
      - STANDARD_IA
      - ONEZONE_IA
      - GLACIER
    Default: GLACIER

  LifecycleDataExpiration:
    Type: Number
    Description: >-
      Number of days (from creation) when objects are 
      deleted from S3 and the LifecycleDataStorageClass
    Default: 365000

  AdminRoleArns:
    Type: List<String>
    Description: >-
      List of IAM role ARNs (strings) with administrator
      access and should retain access to restricted resources
      (e.g., private S3 bucket, KMS key, secrets).
      You can provide role ARNs or assumed-role ARNs.

  AdminRoleIds:
    Type: List<String>
    Description: >-
      List of IAM role IDs (strings) with administrator
      access and should retain access to restricted resources
      (e.g., private S3 bucket, KMS key, secrets). The role ID
      can be obtained in one of two ways. 

      1) You can assume the role in question and run the following
      command, and the role ID is the substring before the colon.

      aws sts get-caller-identity --output text --query UserId

      2) With the appropriate IAM permissions (with an admin role),
      you can run the following command, where `<role_name>` corresponds
      to the role name (see examples below to extract the role name). 

      aws iam get-role --role-name <role_name> --output text --query Role.RoleId

      For example, if the role ARN is
      arn:aws:iam::456789012345:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_Viewer_7e6c15a6e90908df
      the role name is AWSReservedSSO_Viewer_7e6c15a6e90908df. 
      If you have the ARN for an assumed role (distinguished by the 
      `arn:aws:sts::` prefix and `assumed-role/` substring), you need 
      to exclude the session name at the end of the ARN. For instance,
      the following assumed-role ARN has the same role name as above:
      arn:aws:sts::035458030717:assumed-role/AWSReservedSSO_Viewer_fd80909e6a51c6e7/bruno.grande@sagebase.org.

  TemplateRootUrl:
    Type: String
    Description: URL of S3 bucket where templates are deployed
    ConstraintDescription: Must be a valid S3 HTTP URL

  TowerForgePolicyArn:
    Type: String
    Description: ARN for Tower Forge IAM policy

  TowerLaunchPolicyArn:
    Type: String
    Description: ARN for Tower Launch IAM policy

Conditions:
  HasReadWriteAccessArns:
    !Not [!Equals [!Join [",", !Ref ReadWriteAccessArns], ""]]
  HasReadOnlyAccessArns:
    !Not [!Equals [!Join [",", !Ref ReadOnlyAccessArns], ""]]
  HasAnyAccessArns:
    !Or [!Condition HasReadWriteAccessArns, !Condition HasReadOnlyAccessArns]

Resources:
  ReadWriteAccessRole:
    Type: AWS::IAM::Role
    Condition: HasReadWriteAccessArns
    Properties:
      RoleName: !Sub "${AWS::Region}-${AWS::StackName}-ReadWriteAccessRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                !Split 
                  - "|"
                  - !Join
                    - "|"
                    - - !Join
                        - "|"
                        - !Ref ReadWriteAccessArns
                      - !Join
                        - "|"
                        - !Ref AdminRoleArns
            Action:
              - "sts:AssumeRole"

  ReadOnlyAccessRole:
    Type: AWS::IAM::Role
    Condition: HasReadOnlyAccessArns
    Properties:
      RoleName: !Sub "${AWS::Region}-${AWS::StackName}-ReadOnlyAccessRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                !Split 
                  - "|"
                  - !Join
                    - "|"
                    - - !Join
                        - "|"
                        - !Ref ReadOnlyAccessArns
                      - !Join
                        - "|"
                        - !Ref AdminRoleArns
            Action:
              - "sts:AssumeRole"

  EncryptionKeyStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateRootUrl}/aws-infra/v0.3.1/KMS/kms-key.yaml
      TimeoutInMinutes: 5
      Parameters:
        AliasName: !Sub "alias/${AWS::Region}-${AWS::StackName}-EncryptionKey"
        AdminPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !Join
              - ","
              - !Ref AdminRoleArns
        UserPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !Join
              - ","
              - !Ref AdminRoleArns
            - !If
              - HasReadWriteAccessArns
              - !GetAtt ReadWriteAccessRole.Arn
              - !Ref AWS::NoValue
            - !If
              - HasReadOnlyAccessArns
              - !GetAtt ReadOnlyAccessRole.Arn
              - !Ref AWS::NoValue

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::Region}-${AWS::StackName}-tower-bucket"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt EncryptionKeyStack.Outputs.Key
      LifecycleConfiguration:
        Rules:
        - Id: DataLifecycleRule
          Status: !Ref EnableDataLifeCycle
          ExpirationInDays: !Ref LifecycleDataExpiration
          Transitions:
            - TransitionInDays: !Ref LifecycleDataTransition
              StorageClass: !Ref LifecycleDataStorageClass

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: RestrictAccessToAdminsAndStackUsers
            Effect: Deny
            Principal: "*"
            Condition:
              StringNotLike:
                aws:userid:
                  !Split
                    - "|"
                    - !Join
                      - ":*|"
                      - !Split
                        - "|"
                        - !Join
                          - "|"
                          - - !Join 
                              - "|"
                              - !Ref AdminRoleIds
                            - !If
                              - HasReadWriteAccessArns
                              - !GetAtt ReadWriteAccessRole.RoleId
                              - !Ref AWS::NoValue
                            - !If
                              - HasReadOnlyAccessArns
                              - !GetAtt ReadOnlyAccessRole.RoleId
                              - !Ref AWS::NoValue
                            - !Ref AWS::AccountId
            Action: "*"
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}"
              - !Sub "arn:aws:s3:::${Bucket}/*"

  TowerForgeServiceUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - !Ref TowerForgePolicyArn
        - !Ref TowerLaunchPolicyArn
      Policies:
        - PolicyName: TowerForgeServiceUserS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:PutObjectTagging"
                - "s3:DeleteObject"
              Resource:
                - !Sub "arn:aws:s3:::${Bucket}"
                - !Sub "arn:aws:s3:::${Bucket}/*"

  TowerForgeServiceUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref TowerForgeServiceUser

  TowerForgeServiceUserAccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-Credentials"
      Description: !Sub "Tower Forge Credentials for Compute Environment ${AWS::StackName}"
      SecretString: !Sub >-
        {
          "access_key_id":      "${TowerForgeServiceUserAccessKey}",
          "secret_access_key":  "${TowerForgeServiceUserAccessKey.SecretAccessKey}"
        }
      KmsKeyId: !GetAtt EncryptionKeyStack.Outputs.Key

  SharedAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: HasAnyAccessArns
    Properties:
      PolicyName: !Sub "${AWS::Region}-${AWS::StackName}-SharedAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Ref TowerForgeServiceUserAccessKeySecret
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource:
              - !GetAtt EncryptionKeyStack.Outputs.KeyArn
      Roles:
        - !If
          - HasReadWriteAccessArns
          - !Ref ReadWriteAccessRole
          - !Ref AWS::NoValue
        - !If
          - HasReadOnlyAccessArns
          - !Ref ReadOnlyAccessRole
          - !Ref AWS::NoValue

Outputs:
  ReadWriteAccessRole:
    Value: !Ref ReadWriteAccessRole
    Condition: HasReadWriteAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadWriteAccessRole"

  ReadWriteAccessRoleArn:
    Value: !GetAtt ReadWriteAccessRole.Arn
    Condition: HasReadWriteAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadWriteAccessRoleArn"

  ReadOnlyAccessRole:
    Value: !Ref ReadOnlyAccessRole
    Condition: HasReadOnlyAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadOnlyAccessRole"

  ReadOnlyAccessRoleArn:
    Value: !GetAtt ReadOnlyAccessRole.Arn
    Condition: HasReadOnlyAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ReadOnlyAccessRoleArn"

  Bucket:
    Value: !Ref Bucket
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-Bucket"

  BucketArn:
    Value: !GetAtt Bucket.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-BucketArn"

  TowerForgeServiceUser:
    Value: !Ref TowerForgeServiceUser
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUser"

  TowerForgeServiceUserArn:
    Value: !GetAtt TowerForgeServiceUser.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserArn"

  TowerForgeServiceUserAccessKeySecret:
    Value: !Sub "${AWS::StackName}-Credentials"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserAccessKeySecretName"

  TowerForgeServiceUserAccessKeySecretArn:
    Value: !Ref TowerForgeServiceUserAccessKeySecret
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserAccessKeySecretArn"

  SharedAccessPolicy:
    Value: !Ref SharedAccessPolicy
    Condition: HasAnyAccessArns
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-SharedAccessPolicy"
